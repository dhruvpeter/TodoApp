{"version":3,"sources":["Component/About/About.js","Component/Header/Header.js","Component/TodoApp/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["About","style","textAlign","Header","to","TodoApp","state","input","items","handleChange","event","setState","target","value","storeItems","preventDefault","deleteItem","key","filter","data","index","editItem","this","className","onSubmit","type","onChange","placeholder","map","onClick","Component","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAEe,SAASA,IACpB,OACI,6BACI,wBAAIC,MAAO,CAACC,UAAU,WAAtB,oB,iBCFG,SAASC,IACtB,OACE,gCACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,U,YCLeC,G,kNACnBC,MAAQ,CACNC,MAAO,GACPC,MAAO,I,EAETC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZJ,MAAOG,EAAME,OAAOC,S,EAGxBC,WAAa,SAACJ,GACZA,EAAMK,iBADgB,IAEdR,EAAU,EAAKD,MAAfC,MAGR,EAAKI,SAAS,CACZH,MAAM,GAAD,mBAAM,EAAKF,MAAME,OAAjB,CAAwBD,IAC7BA,MAAO,M,EAGXS,WAAa,SAACC,GAMZ,EAAKN,SAAS,CACZH,MAAO,EAAKF,MAAME,MAAMU,QAAO,SAACC,EAAMC,GAAP,OAAiBA,IAAUH,Q,EAG9DI,SAAW,SAACJ,GACV,EAAKN,SAAS,CACZJ,MAAO,EAAKD,MAAME,MAAMS,KAE1B,EAAKD,WAAWC,I,uDAER,IAAD,SACkBK,KAAKhB,MAAtBC,EADD,EACCA,MAAOC,EADR,EACQA,MACf,OACE,yBAAKe,UAAU,kBACb,0BAAMA,UAAU,gBAAgBC,SAAUF,KAAKR,YAC7C,wCACA,2BACEW,KAAK,OACLC,SAAUJ,KAAKb,aACfI,MAAON,EACPoB,YAAY,oBAGhB,4BACGnB,EAAMoB,KAAI,SAACT,EAAMC,GAAP,OACT,wBAAIH,IAAKG,GACND,EAAM,IACP,uBACEI,UAAU,cACVM,QAAS,kBAAM,EAAKR,SAASD,MAE/B,uBACEG,UAAU,mBACVM,QAAS,kBAAM,EAAKb,WAAWI,gB,GA3DVU,c,OCIhBC,E,uKAEjB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW7B,IACjC,kBAAC,IAAD,CAAO2B,KAAK,SAASE,UAAWlC,S,GANP8B,aCMbK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3eec086b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div>\r\n            <h1 style={{textAlign:\"center\"}}>About Component</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport { Link } from \"react-router-dom\";\r\nexport default function Header() {\r\n  return (\r\n    <header>\r\n      <Link to=\"/\">Home</Link>\r\n      <Link to=\"/about\">About</Link>\r\n    </header>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./TodoApp.css\";\r\nexport default class TodoApp extends Component {\r\n  state = {\r\n    input: \"\",\r\n    items: [],\r\n  };\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      input: event.target.value,\r\n    });\r\n  };\r\n  storeItems = (event) => {\r\n    event.preventDefault();\r\n    const { input } = this.state;\r\n    // const allItems = this.state.items;\r\n    // allItems.push(input);\r\n    this.setState({\r\n      items: [...this.state.items, input],\r\n      input: \"\",\r\n    });\r\n  };\r\n  deleteItem = (key) => {\r\n    //   const allItems=this.state.items;\r\n    //   allItems.splice(key,1);\r\n    //   this.setState({\r\n    //       items:allItems\r\n    //   })\r\n    this.setState({\r\n      items: this.state.items.filter((data, index) => index !== key),\r\n    });\r\n  };\r\n  editItem = (key) => {\r\n    this.setState({\r\n      input: this.state.items[key],\r\n    });\r\n    this.deleteItem(key);\r\n  };\r\n  render() {\r\n    const { input, items } = this.state;\r\n    return (\r\n      <div className=\"todo-container\">\r\n        <form className=\"input-section\" onSubmit={this.storeItems}>\r\n          <h1>Todo App</h1>\r\n          <input\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={input}\r\n            placeholder=\"Enter Items...\"\r\n          />\r\n        </form>\r\n        <ul>\r\n          {items.map((data, index) => (\r\n            <li key={index}>\r\n              {data}{\" \"}\r\n              <i\r\n                className=\"fas fa-edit\"\r\n                onClick={() => this.editItem(index)}\r\n              ></i>\r\n              <i\r\n                className=\"far fa-trash-alt\"\r\n                onClick={() => this.deleteItem(index)}\r\n              ></i>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport About from \"./Component/About/About\";\nimport Header from \"./Component/Header/Header\";\nimport TodoApp from \"./Component/TodoApp/TodoApp\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Header />\n        <Route path=\"/\" exact component={TodoApp} />\n        <Route path=\"/about\" component={About} />\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}